diff --git a/control/monitor.py b/control/monitor.py
index 43d7af0..9057879 100644
--- a/control/monitor.py
+++ b/control/monitor.py
@@ -8,8 +8,8 @@ import schedule
 import time
 from django.conf import settings
 
-client = mqtt.Client(settings.MQTT_USER_PUB)
-
+#client = mqtt.Client(settings.MQTT_USER_PUB)
+client = mqtt.Client(client_id=settings.MQTT_USER_PUB, protocol=mqtt.MQTTv311, transport="tcp")
 
 def analyze_data():
     # Consulta todos los datos de la última hora, los agrupa por estación y variable
@@ -59,6 +59,59 @@ def analyze_data():
     print(alerts, "alertas enviadas")
 
 
+def analyze_percentage_change_by_seconds():
+    # Consulta los datos de los últimos 30 segundos y los compara con los 30 segundos anteriores
+    print("Calculando alertas por cambio porcentual en segundos...")
+
+    now = datetime.now()
+    sixty_seconds_ago = now - timedelta(seconds=60)
+    thirty_seconds_ago = now - timedelta(seconds=30)
+
+    # Consulta datos del último período (últimos 30 segundos)
+    current_data = Data.objects.filter(base_time__gte=thirty_seconds_ago)
+    # Consulta datos del período anterior (30 a 60 segundos atrás)
+    previous_data = Data.objects.filter(base_time__gte=sixty_seconds_ago, base_time__lt=thirty_seconds_ago)
+
+    # Agrupa por estación y variable
+    current_aggregation = current_data.annotate(current_avg=Avg('avg_value')) \
+        .select_related('station', 'measurement') \
+        .select_related('station__user', 'station__location') \
+        .values('current_avg', 'station__user__username', 'measurement__name', 'station__location__city__name')
+
+    previous_aggregation = previous_data.annotate(previous_avg=Avg('avg_value')) \
+        .select_related('station', 'measurement') \
+        .select_related('station__user', 'station__location') \
+        .values('previous_avg', 'station__user__username', 'measurement__name', 'station__location__city__name')
+
+    # Combina ambas consultas por estación y variable
+    alerts = 0
+    for current, previous in zip(current_aggregation, previous_aggregation):
+        # Verifica si son del mismo usuario y misma medición
+        if current['measurement__name'] == previous['measurement__name'] and current['station__user__username'] == previous['station__user__username']:
+            # Calcula el cambio porcentual
+            if previous['previous_avg'] != 0:
+                percentage_change = ((current['current_avg'] - previous['previous_avg']) / previous['previous_avg']) * 100
+            else:
+                percentage_change = 0
+
+            # Umbral de cambio porcentual
+            threshold = 2
+            print(percentage_change, threshold)
+            if abs(percentage_change) > threshold:
+                variable = current['measurement__name']
+                city = current['station__location__city__name']
+                user = current['station__user__username']
+                topic = '{}/{}/in'.format(city, user)
+                message = "ALERT: {} cambió {}% en los últimos 30 segundos".format(variable, round(percentage_change, 2))
+
+                print(now, "Enviando alerta de cambio porcentual a {} {}".format(topic, variable))
+                client.publish(topic, message)
+                alerts += 1
+
+    print("Alertas enviadas:", alerts)
+
+
+
 def on_connect(client, userdata, flags, rc):
     '''
     Función que se ejecuta cuando se conecta al bróker.
@@ -105,7 +158,7 @@ def start_cron():
     Inicia el cron que se encarga de ejecutar la función analyze_data cada 5 minutos.
     '''
     print("Iniciando cron...")
-    schedule.every(5).minutes.do(analyze_data)
+    schedule.every(1).minutes.do(analyze_percentage_change_by_seconds)
     print("Servicio de control iniciado")
     while 1:
         schedule.run_pending()
